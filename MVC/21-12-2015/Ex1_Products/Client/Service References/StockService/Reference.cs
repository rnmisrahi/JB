//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.StockService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Product", Namespace="http://schemas.datacontract.org/2004/07/Server")]
    [System.SerializableAttribute()]
    public partial class Product : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProductIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProductNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Amount {
            get {
                return this.AmountField;
            }
            set {
                if ((this.AmountField.Equals(value) != true)) {
                    this.AmountField = value;
                    this.RaisePropertyChanged("Amount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProductID {
            get {
                return this.ProductIDField;
            }
            set {
                if ((this.ProductIDField.Equals(value) != true)) {
                    this.ProductIDField = value;
                    this.RaisePropertyChanged("ProductID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProductName {
            get {
                return this.ProductNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProductNameField, value) != true)) {
                    this.ProductNameField = value;
                    this.RaisePropertyChanged("ProductName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="StockService.IStockService")]
    public interface IStockService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/GetAllProducts", ReplyAction="http://tempuri.org/IStockService/GetAllProductsResponse")]
        Client.StockService.Product[] GetAllProducts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/GetAllProducts", ReplyAction="http://tempuri.org/IStockService/GetAllProductsResponse")]
        System.Threading.Tasks.Task<Client.StockService.Product[]> GetAllProductsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/AddProduct", ReplyAction="http://tempuri.org/IStockService/AddProductResponse")]
        void AddProduct(string productName, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/AddProduct", ReplyAction="http://tempuri.org/IStockService/AddProductResponse")]
        System.Threading.Tasks.Task AddProductAsync(string productName, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/AddAmount", ReplyAction="http://tempuri.org/IStockService/AddAmountResponse")]
        void AddAmount(int productID, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/AddAmount", ReplyAction="http://tempuri.org/IStockService/AddAmountResponse")]
        System.Threading.Tasks.Task AddAmountAsync(int productID, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/SubAmount", ReplyAction="http://tempuri.org/IStockService/SubAmountResponse")]
        void SubAmount(int productID, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/SubAmount", ReplyAction="http://tempuri.org/IStockService/SubAmountResponse")]
        System.Threading.Tasks.Task SubAmountAsync(int productID, int amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/DeleteProduct", ReplyAction="http://tempuri.org/IStockService/DeleteProductResponse")]
        void DeleteProduct(int code, int productID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/DeleteProduct", ReplyAction="http://tempuri.org/IStockService/DeleteProductResponse")]
        System.Threading.Tasks.Task DeleteProductAsync(int code, int productID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/RenameProduct", ReplyAction="http://tempuri.org/IStockService/RenameProductResponse")]
        void RenameProduct(int code, int productID, string newName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/RenameProduct", ReplyAction="http://tempuri.org/IStockService/RenameProductResponse")]
        System.Threading.Tasks.Task RenameProductAsync(int code, int productID, string newName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/ZeroAllProducts", ReplyAction="http://tempuri.org/IStockService/ZeroAllProductsResponse")]
        void ZeroAllProducts(int code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStockService/ZeroAllProducts", ReplyAction="http://tempuri.org/IStockService/ZeroAllProductsResponse")]
        System.Threading.Tasks.Task ZeroAllProductsAsync(int code);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IStockServiceChannel : Client.StockService.IStockService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StockServiceClient : System.ServiceModel.ClientBase<Client.StockService.IStockService>, Client.StockService.IStockService {
        
        public StockServiceClient() {
        }
        
        public StockServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public StockServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StockServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StockServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Client.StockService.Product[] GetAllProducts() {
            return base.Channel.GetAllProducts();
        }
        
        public System.Threading.Tasks.Task<Client.StockService.Product[]> GetAllProductsAsync() {
            return base.Channel.GetAllProductsAsync();
        }
        
        public void AddProduct(string productName, int amount) {
            base.Channel.AddProduct(productName, amount);
        }
        
        public System.Threading.Tasks.Task AddProductAsync(string productName, int amount) {
            return base.Channel.AddProductAsync(productName, amount);
        }
        
        public void AddAmount(int productID, int amount) {
            base.Channel.AddAmount(productID, amount);
        }
        
        public System.Threading.Tasks.Task AddAmountAsync(int productID, int amount) {
            return base.Channel.AddAmountAsync(productID, amount);
        }
        
        public void SubAmount(int productID, int amount) {
            base.Channel.SubAmount(productID, amount);
        }
        
        public System.Threading.Tasks.Task SubAmountAsync(int productID, int amount) {
            return base.Channel.SubAmountAsync(productID, amount);
        }
        
        public void DeleteProduct(int code, int productID) {
            base.Channel.DeleteProduct(code, productID);
        }
        
        public System.Threading.Tasks.Task DeleteProductAsync(int code, int productID) {
            return base.Channel.DeleteProductAsync(code, productID);
        }
        
        public void RenameProduct(int code, int productID, string newName) {
            base.Channel.RenameProduct(code, productID, newName);
        }
        
        public System.Threading.Tasks.Task RenameProductAsync(int code, int productID, string newName) {
            return base.Channel.RenameProductAsync(code, productID, newName);
        }
        
        public void ZeroAllProducts(int code) {
            base.Channel.ZeroAllProducts(code);
        }
        
        public System.Threading.Tasks.Task ZeroAllProductsAsync(int code) {
            return base.Channel.ZeroAllProductsAsync(code);
        }
    }
}
